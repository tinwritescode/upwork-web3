// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id      BigInt @id @default(autoincrement())
  address String @unique
  role    Role   @default(USER)

  clientId BigInt? @unique
  Client   Client?

  JobAssigned Job[]
}

model Client {
  id   BigInt @id @default(autoincrement())
  name String

  Job Job[]

  userAddress String @unique
  User        User   @relation(fields: [userAddress], references: [address], onDelete: Cascade)
}

enum PayType {
  HOURLY
  FIXED
}

enum LevelRequired {
  ENTRY
  INTERMEDIATE
  EXPERT
}

enum ProjectType {
  NEW
  ON_GOING
  MAINTAINANCE
}

enum ProjectScope {
  SMALL
  MEDIUM
  LARGE
}

enum ProjectLong {
  ONE_TO_THREE_MONTHS
  THREE_TO_SIX_MONTHS
  MORE_THAN_SIX_MONTHS
}

model Job {
  id BigInt @id @default(autoincrement())

  assignedTo BigInt?
  AssignedTo User?   @relation(fields: [assignedTo], references: [id], onDelete: Cascade)

  Client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId BigInt

  // Fields
  title              String
  content            String
  payType            PayType
  levelRequired      LevelRequired
  projectType        ProjectType
  skillsAndExperties SkillSubItem[]
  scope              ProjectScope
  long               ProjectLong

  // Budget
  perHourBudget Int?
  fixedBudget   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SkillsAndExperties {
  id BigInt @id @default(autoincrement())

  subItems SkillSubItem[]

  skill String
}

model SkillSubItem {
  id BigInt @id @default(autoincrement())

  // name
  name String @unique

  SkillsAndExperties   SkillsAndExperties? @relation(fields: [skillsAndExpertiesId], references: [id], onDelete: Cascade)
  skillsAndExpertiesId BigInt?
  Job                  Job?                @relation(fields: [jobId], references: [id])
  jobId                BigInt?
}
